// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: hostagent.proto

package landscape_hostagent_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LandscapeHostAgent_Connect_FullMethodName           = "/landscapehostagentapi.LandscapeHostAgent/Connect"
	LandscapeHostAgent_SendCommandStatus_FullMethodName = "/landscapehostagentapi.LandscapeHostAgent/SendCommandStatus"
)

// LandscapeHostAgentClient is the client API for LandscapeHostAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LandscapeHostAgent service.
// The connection is made from the hostagent (client) to the landscape server (sass or on-prem).
type LandscapeHostAgentClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HostAgentInfo, Command], error)
	SendCommandStatus(ctx context.Context, in *CommandStatus, opts ...grpc.CallOption) (*Empty, error)
}

type landscapeHostAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewLandscapeHostAgentClient(cc grpc.ClientConnInterface) LandscapeHostAgentClient {
	return &landscapeHostAgentClient{cc}
}

func (c *landscapeHostAgentClient) Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HostAgentInfo, Command], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LandscapeHostAgent_ServiceDesc.Streams[0], LandscapeHostAgent_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HostAgentInfo, Command]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LandscapeHostAgent_ConnectClient = grpc.BidiStreamingClient[HostAgentInfo, Command]

func (c *landscapeHostAgentClient) SendCommandStatus(ctx context.Context, in *CommandStatus, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, LandscapeHostAgent_SendCommandStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LandscapeHostAgentServer is the server API for LandscapeHostAgent service.
// All implementations must embed UnimplementedLandscapeHostAgentServer
// for forward compatibility.
//
// LandscapeHostAgent service.
// The connection is made from the hostagent (client) to the landscape server (sass or on-prem).
type LandscapeHostAgentServer interface {
	Connect(grpc.BidiStreamingServer[HostAgentInfo, Command]) error
	SendCommandStatus(context.Context, *CommandStatus) (*Empty, error)
	mustEmbedUnimplementedLandscapeHostAgentServer()
}

// UnimplementedLandscapeHostAgentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLandscapeHostAgentServer struct{}

func (UnimplementedLandscapeHostAgentServer) Connect(grpc.BidiStreamingServer[HostAgentInfo, Command]) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedLandscapeHostAgentServer) SendCommandStatus(context.Context, *CommandStatus) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommandStatus not implemented")
}
func (UnimplementedLandscapeHostAgentServer) mustEmbedUnimplementedLandscapeHostAgentServer() {}
func (UnimplementedLandscapeHostAgentServer) testEmbeddedByValue()                            {}

// UnsafeLandscapeHostAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LandscapeHostAgentServer will
// result in compilation errors.
type UnsafeLandscapeHostAgentServer interface {
	mustEmbedUnimplementedLandscapeHostAgentServer()
}

func RegisterLandscapeHostAgentServer(s grpc.ServiceRegistrar, srv LandscapeHostAgentServer) {
	// If the following call pancis, it indicates UnimplementedLandscapeHostAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LandscapeHostAgent_ServiceDesc, srv)
}

func _LandscapeHostAgent_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LandscapeHostAgentServer).Connect(&grpc.GenericServerStream[HostAgentInfo, Command]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LandscapeHostAgent_ConnectServer = grpc.BidiStreamingServer[HostAgentInfo, Command]

func _LandscapeHostAgent_SendCommandStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandscapeHostAgentServer).SendCommandStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LandscapeHostAgent_SendCommandStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandscapeHostAgentServer).SendCommandStatus(ctx, req.(*CommandStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// LandscapeHostAgent_ServiceDesc is the grpc.ServiceDesc for LandscapeHostAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LandscapeHostAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "landscapehostagentapi.LandscapeHostAgent",
	HandlerType: (*LandscapeHostAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCommandStatus",
			Handler:    _LandscapeHostAgent_SendCommandStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _LandscapeHostAgent_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hostagent.proto",
}
